#!/usr/bin/env python
"""
An√°lise dos c√°lculos da Tampa Injetada baseado no screenshot
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fibermeyer_project.settings')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from main.models import MP_Produtos

def analisar_calculos_tampa_injetada():
    print("=== AN√ÅLISE DOS C√ÅLCULOS TAMPA INJETADA ===\n")
    
    print("üìä DADOS DO SCREENSHOT:")
    print("   ‚Ä¢ Grade: GRADE INJETADA GI25X38X38MM (com 5% perda)")
    print("   ‚Ä¢ Quantidade: 1.000 (parece estar em m¬≤)")
    print("   ‚Ä¢ Custo Unit√°rio: R$ 187,00")
    print("   ‚Ä¢ Custo Total: R$ 196,35")
    print("   ‚Ä¢ M√£o de Obra: R$ 65,79")
    
    # Buscar a grade no banco para verificar
    try:
        grade = MP_Produtos.objects.get(id=1385)  # GI25X38X38MM
        print(f"\nüîç DADOS DA GRADE NO BANCO:")
        print(f"   ‚Ä¢ ID: {grade.id}")
        print(f"   ‚Ä¢ Descri√ß√£o: {grade.descricao}")
        print(f"   ‚Ä¢ Custo: R$ {grade.custo_centavos/100:.2f}/m¬≤")
        
        print(f"\nüßÆ VERIFICA√á√ÉO DOS C√ÅLCULOS:")
        
        # Analisando o custo da grade
        custo_unitario_mostrado = 187.00
        custo_total_mostrado = 196.35
        quantidade_mostrada = 1.000
        
        print(f"   GRADE:")
        print(f"   ‚Ä¢ Custo unit√°rio no banco: R$ {grade.custo_centavos/100:.2f}")
        print(f"   ‚Ä¢ Custo unit√°rio mostrado: R$ {custo_unitario_mostrado:.2f}")
        print(f"   ‚Ä¢ Quantidade: {quantidade_mostrada} m¬≤")
        
        # Calcular esperado com 5% perda
        custo_sem_perda = quantidade_mostrada * (grade.custo_centavos/100)
        custo_com_perda = custo_sem_perda * 1.05
        
        print(f"   ‚Ä¢ C√°lculo esperado SEM perda: {quantidade_mostrada} √ó R$ {grade.custo_centavos/100:.2f} = R$ {custo_sem_perda:.2f}")
        print(f"   ‚Ä¢ C√°lculo esperado COM perda: R$ {custo_sem_perda:.2f} √ó 1.05 = R$ {custo_com_perda:.2f}")
        print(f"   ‚Ä¢ Custo total mostrado: R$ {custo_total_mostrado:.2f}")
        
        diferenca = abs(custo_com_perda - custo_total_mostrado)
        if diferenca < 0.01:
            print(f"   ‚úÖ C√°lculo da grade est√° CORRETO")
        else:
            print(f"   ‚ùå Diferen√ßa de R$ {diferenca:.2f}")
            
        # Analisando m√£o de obra
        print(f"\n   M√ÉO DE OBRA:")
        mo_mostrada = 65.79
        valor_hora = 65.79
        
        # Se for 1 hora total (0.5 + 0.5 ou outro)
        horas_calculadas = mo_mostrada / valor_hora
        print(f"   ‚Ä¢ Valor mostrado: R$ {mo_mostrada:.2f}")
        print(f"   ‚Ä¢ Valor/hora padr√£o: R$ {valor_hora:.2f}")
        print(f"   ‚Ä¢ Horas calculadas: {horas_calculadas:.1f}h")
        print(f"   ‚Ä¢ Padr√£o Tampa Injetada: 0.3 + 0.3 = 0.6h")
        print(f"   ‚Ä¢ Esperado: 0.6h √ó R$ {valor_hora:.2f} = R$ {0.6 * valor_hora:.2f}")
        
        if abs(mo_mostrada - (0.6 * valor_hora)) < 0.01:
            print(f"   ‚úÖ M√£o de obra est√° CORRETA (0.6h)")
        elif abs(mo_mostrada - (1.0 * valor_hora)) < 0.01:
            print(f"   ‚ö†Ô∏è M√£o de obra calculada para 1.0h (pode estar usando valores padr√£o diferentes)")
        else:
            print(f"   ‚ùå M√£o de obra com valor inesperado")
            
        # Total geral
        total_esperado = custo_com_perda + mo_mostrada
        print(f"\nüí∞ TOTAL GERAL:")
        print(f"   ‚Ä¢ Grade com perda: R$ {custo_com_perda:.2f}")
        print(f"   ‚Ä¢ M√£o de obra: R$ {mo_mostrada:.2f}")
        print(f"   ‚Ä¢ Total esperado: R$ {total_esperado:.2f}")
        print(f"   ‚Ä¢ (Verificar se o total mostrado na interface confere)")
        
        print(f"\nüîç PONTOS A VERIFICAR:")
        print(f"   1. A quantidade 1.000 representa realmente a √°rea em m¬≤?")
        print(f"   2. A perda de 5% est√° sendo aplicada corretamente?")
        print(f"   3. Os tempos de processamento est√£o configurados corretamente?")
        print(f"   4. O custo unit√°rio mostrado deveria ser o valor COM perda ou SEM perda?")
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar grade: {e}")

if __name__ == '__main__':
    analisar_calculos_tampa_injetada()
