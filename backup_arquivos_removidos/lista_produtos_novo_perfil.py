#!/usr/bin/env python
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fibermeyer_project.settings')
django.setup()

from main.models import MP_Produtos

print("=== PRODUTOS NECESS√ÅRIOS PARA NOVO PERFIL ===")
print()

# Lista dos IDs dos componentes conforme mapeamento no c√≥digo
componentes_ids = {
    1237: 'Roving 4400',
    1238: 'Manta 300', 
    1239: 'V√©u',
    1266: 'Mon√¥mero de estireno',
    1243: 'Anti UV',
    1244: 'Anti OX',
    1245: 'BPO',
    1246: 'TBPB',
    1247: 'Desmoldante',
    1248: 'Antichama',
    1249: 'Carga mineral',
    1250: 'Pigmento',
    1269: 'Resina Poli√©ster (padr√£o)',
    1268: 'Resina Isoft√°lica (opcional)',
    1270: 'Resina √âster Vin√≠lica (opcional)'
}

print("üìã MATERIAIS B√ÅSICOS:")
print("=" * 70)

# Buscar cada produto na base
for mp_id, nome_esperado in componentes_ids.items():
    try:
        produto = MP_Produtos.objects.get(id=mp_id)
        categoria = "ESTRUTURA" if mp_id in [1237, 1238, 1239] else \
                   "RESINA" if "resina" in nome_esperado.lower() else \
                   "QU√çMICO"
        
        print(f"‚úÖ {categoria:10} | ID: {mp_id:4} | {produto.descricao:35} | R$ {produto.custo_centavos/100:8.2f}")
        
    except MP_Produtos.DoesNotExist:
        print(f"‚ùå FALTANDO  | ID: {mp_id:4} | {nome_esperado:35} | PRODUTO N√ÉO ENCONTRADO")

print("\nüîß M√ÉO DE OBRA:")
print("=" * 70)

try:
    from main.models import MaoObra
    mao_obra = MaoObra.objects.filter(nome__icontains='pultrus√£o').first()
    if mao_obra:
        print(f"‚úÖ TRABALHO   | ID: {mao_obra.id:4} | {mao_obra.nome:35} | R$ {mao_obra.valor_centavos/100:8.2f}/m√™s")
    else:
        print("‚ùå M√ÉO DE OBRA PULTRUS√ÉO N√ÉO ENCONTRADA")
except:
    print("‚ùå ERRO AO BUSCAR M√ÉO DE OBRA")

print("\n" + "=" * 70)
print("üìä RESUMO POR CATEGORIA:")
print("=" * 70)

# Agrupar por categoria
categorias = {
    'ESTRUTURA': [1237, 1238, 1239],
    'RESINAS': [1269, 1268, 1270],
    'QU√çMICOS': [1266, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250]
}

for categoria, ids in categorias.items():
    print(f"\nüè∑Ô∏è  {categoria}:")
    custo_categoria = 0
    itens_encontrados = 0
    
    for mp_id in ids:
        try:
            produto = MP_Produtos.objects.get(id=mp_id)
            custo_categoria += produto.custo_centavos / 100
            itens_encontrados += 1
            print(f"   ‚Ä¢ {produto.descricao} (R$ {produto.custo_centavos/100:.2f})")
        except MP_Produtos.DoesNotExist:
            print(f"   ‚ùå ID {mp_id} - {componentes_ids.get(mp_id, 'Desconhecido')} (N√ÉO ENCONTRADO)")
    
    print(f"   üìà Custo m√©dio categoria: R$ {custo_categoria/len(ids) if ids else 0:.2f}")
    print(f"   üìä Produtos encontrados: {itens_encontrados}/{len(ids)}")

print(f"\n" + "=" * 70)
print("üéØ CONCLUS√ÉO:")
print("   ‚Ä¢ Total de produtos necess√°rios: 15 materiais + 1 m√£o de obra")
print("   ‚Ä¢ Estrutura: Roving, Manta, V√©u (refor√ßos)")
print("   ‚Ä¢ Resinas: 3 op√ß√µes (Poli√©ster, Isoft√°lica, √âster Vin√≠lica)")
print("   ‚Ä¢ Qu√≠micos: 9 aditivos (catalisadores, desmoldante, etc.)")
print("   ‚Ä¢ M√£o de obra: Pultrus√£o (processo de fabrica√ß√£o)")
print("=" * 70)
