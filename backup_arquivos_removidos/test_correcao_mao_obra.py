#!/usr/bin/env python
import os
import sys
import django
import asyncio
import json
from unittest.mock import Mock

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fibermeyer_project.settings')
django.setup()

from main.models import MP_Produtos

print("=== TESTE: DEMONSTRA√á√ÉO DA CORRE√á√ÉO DE M√ÉO DE OBRA ===")

print("\n1. PROBLEMA ANTERIOR:")
print("   - C√°lculo: M√£o de obra = R$ 6,28")
print("   - Produto criado: 'M√£o de Obra - Pultrus√£o' com custo R$ 0,01")
print("   - Componente salvo: Usava o custo do produto (R$ 0,01) ‚ùå")
print("   - Resultado: Valor errado na tabela de componentes")

print("\n2. CORRE√á√ÉO IMPLEMENTADA:")
print("   - Antes de salvar o componente:")
print("   - Sistema atualiza o custo do produto 'M√£o de Obra - Pultrus√£o'")
print("   - Usa o valor calculado (R$ 6,28) em vez do fixo (R$ 0,01)")
print("   - Componente salvo usa o valor correto ‚úÖ")

print("\n3. FLUXO CORRIGIDO:")
print("   a) Calcular m√£o de obra ‚Üí R$ 6,28")
print("   b) Encontrar/criar produto 'M√£o de Obra - Pultrus√£o'")
print("   c) NOVO: Atualizar custo do produto para 628 centavos")
print("   d) Salvar componente (que agora usa o valor correto)")

# Verificar se j√° existe produto de m√£o de obra
try:
    mao_obra_produto = MP_Produtos.objects.filter(
        descricao__icontains='m√£o de obra'
    ).filter(
        descricao__icontains='pultrus√£o'
    ).first()
    
    if mao_obra_produto:
        print(f"\n4. PRODUTO M√ÉO DE OBRA ATUAL:")
        print(f"   ID: {mao_obra_produto.id}")
        print(f"   Descri√ß√£o: {mao_obra_produto.descricao}")
        print(f"   Custo atual: {mao_obra_produto.custo_centavos} centavos = R$ {mao_obra_produto.custo_centavos/100:.2f}")
        print(f"   Refer√™ncia: {mao_obra_produto.referencia}")
        
        # Simular a atualiza√ß√£o que ser√° feita
        valor_calculado = 628  # R$ 6,28
        print(f"\n5. SIMULA√á√ÉO DA ATUALIZA√á√ÉO:")
        print(f"   Valor a ser usado: {valor_calculado} centavos = R$ {valor_calculado/100:.2f}")
        print(f"   Opera√ß√£o: PATCH /api/produtos/{mao_obra_produto.id}/")
        print(f"   Body: {{'custo_centavos': {valor_calculado}}}")
        
    else:
        print(f"\n4. PRODUTO M√ÉO DE OBRA:")
        print(f"   Ainda n√£o foi criado")
        print(f"   Ser√° criado automaticamente no primeiro salvamento")
        
except Exception as e:
    print(f"\n4. ERRO AO VERIFICAR PRODUTO: {e}")

print(f"\n6. COMO TESTAR:")
print(f"   1. Acesse o sistema no navegador")
print(f"   2. Configure um produto parametrizado")
print(f"   3. Clique 'Salvar na Base'")
print(f"   4. Veja no console os logs:")
print(f"      'üîÑ Atualizando custo do produto m√£o de obra...'")
print(f"      '‚úÖ Custo do produto m√£o de obra atualizado para [valor] centavos'")
print(f"   5. Verifique na tabela de componentes o valor correto")

print(f"\n7. LOGS ESPERADOS NO CONSOLE:")
print(f"   üîß Processando m√£o de obra: ID [numero]")
print(f"   üîÑ Atualizando custo do produto m√£o de obra...")
print(f"   ‚úÖ Custo do produto m√£o de obra atualizado para 628 centavos")
print(f"   üíæ Salvando componente: M√£o de Obra - Pultrus√£o (ID: [numero])")
print(f"   ‚úÖ Componente salvo: M√£o de Obra - Pultrus√£o (M√ÉO DE OBRA)")

print("\n" + "="*70)
print("‚úÖ CORRE√á√ÉO IMPLEMENTADA!")
print("   Agora o valor da m√£o de obra ser√° preservado corretamente")
print("   nos componentes do produto composto!")
print("="*70)
