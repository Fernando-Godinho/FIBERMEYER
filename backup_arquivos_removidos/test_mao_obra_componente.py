#!/usr/bin/env python
import os
import sys
import django
import json
from io import StringIO

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fibermeyer_project.settings')
django.setup()

from django.test import RequestFactory
from main.views import calcular_produto_parametrizado

print("=== TESTE: SALVAMENTO DE M√ÉO DE OBRA COMO COMPONENTE ===")

# Criar uma requisi√ß√£o simulada
factory = RequestFactory()
request_data = {
    "template_id": 24,  # Template "Novo Perfil"
    "parametros": {
        "largura": "200",
        "altura": "100", 
        "comprimento": "2000",  # Produto maior para ter custo de m√£o de obra mais significativo
        "velocidade_m_h": "15",  # Velocidade menor = maior custo
        "num_matrizes": "1",     # Menos matrizes = maior custo
        "num_maquinas_utilizadas": "2"  # Mais m√°quinas = maior custo
    }
}

# Fazer requisi√ß√£o POST simulada
request = factory.post(
    '/api/calcular-produto-parametrizado/',
    data=json.dumps(request_data),
    content_type='application/json'
)

print("Calculando produto com par√¢metros que geram maior custo de m√£o de obra...")
print("Par√¢metros:")
for key, value in request_data["parametros"].items():
    print(f"  {key}: {value}")

print("\n" + "="*60)

try:
    # Chamar a fun√ß√£o que ir√° gerar os logs
    response = calcular_produto_parametrizado(request)
    response_data = json.loads(response.content)
    
    if response_data.get('success'):
        print("‚úÖ C√ÅLCULO REALIZADO COM SUCESSO")
        print(f"Custo Total: {response_data.get('custo_total', 0)/100:.2f}")
        print(f"Componentes calculados: {len(response_data.get('componentes', []))}")
        
        # Verificar se m√£o de obra est√° inclusa
        mao_obra_encontrada = False
        for comp in response_data.get('componentes', []):
            if 'M√£o de Obra' in comp.get('nome', ''):
                mao_obra_encontrada = True
                print(f"\nüîß COMPONENTE M√ÉO DE OBRA:")
                print(f"  Nome: {comp['nome']}")
                print(f"  Produto: {comp.get('produto', 'N/A')}")
                print(f"  Quantidade: {comp['quantidade']}")
                print(f"  Custo: {comp['custo_total']/100:.2f}")
                break
        
        if mao_obra_encontrada:
            print(f"\n‚úÖ M√ÉO DE OBRA SER√Å INCLU√çDA NO SALVAMENTO!")
            print(f"   - Quando salvar como produto composto, a m√£o de obra ser√° um componente")
            print(f"   - Sistema criar√° automaticamente produto 'M√£o de Obra - Pultrus√£o' se necess√°rio")
            print(f"   - Componente ser√° salvo com observa√ß√£o especial")
        else:
            print(f"\n‚ùå M√ÉO DE OBRA N√ÉO ENCONTRADA!")
            print(f"   Verificar se o template possui par√¢metros de m√£o de obra")
        
        print(f"\nüìã TODOS OS COMPONENTES:")
        for i, comp in enumerate(response_data.get('componentes', []), 1):
            nome = comp.get('nome', 'N/A')
            custo = comp.get('custo_total', 0) / 100
            qtd = comp.get('quantidade', 0)
            tipo = "M√ÉO DE OBRA" if 'M√£o de Obra' in nome else "MATERIAL"
            print(f"  {i}. {nome} - R$ {custo:.2f} ({qtd:.3f}) [{tipo}]")
            
    else:
        print(f"‚ùå ERRO NO C√ÅLCULO: {response_data.get('error', 'Erro desconhecido')}")
        
except Exception as e:
    print(f"‚ùå ERRO DURANTE O TESTE: {e}")
    import traceback
    traceback.print_exc()

print(f"\n" + "="*60)
print("CONCLUS√ÉO:")
print("- Se m√£o de obra apareceu na lista, ela ser√° salva como componente")
print("- O sistema agora cria automaticamente o produto 'M√£o de Obra - Pultrus√£o'")
print("- Cada produto parametrizado incluir√° seus materiais + m√£o de obra")
print("- Teste agora no navegador salvando um produto na base!")
print("="*60)
