#!/usr/bin/env python
"""
Script para testar a nova l√≥gica de impostos com Industrializa√ß√£o e Uso/Consumo
"""

import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fibermeyer_project.settings')
django.setup()

from main.models import Imposto

def testar_nova_logica():
    """Testa a nova l√≥gica de mapeamento de impostos"""
    
    print("üéØ TESTANDO NOVA L√ìGICA DE IMPOSTOS")
    print("=" * 60)
    
    # Cen√°rios de teste baseados nas novas op√ß√µes
    cenarios = [
        # (UF, CONTRIBUINTE, VENDA_DESTINADA, IMPOSTO_ESPERADO)
        ('SP', 'CONTRIBUINTE', 'INDUSTRIALIZACAO', 'ICMS SP - Contribuinte Industrializa√ß√£o'),
        ('SP', 'NAO_CONTRIBUINTE', 'INDUSTRIALIZACAO', 'ICMS SP - N√£o Contribuinte Industrializa√ß√£o'),
        ('SP', 'CONTRIBUINTE', 'USO_CONSUMO', 'ICMS SP - Contribuinte Uso/Consumo'),
        ('SP', 'NAO_CONTRIBUINTE', 'USO_CONSUMO', 'ICMS SP - N√£o Contribuinte Uso/Consumo'),
        
        # Testando compatibilidade com op√ß√µes antigas
        ('BA', 'CONTRIBUINTE', 'REVENDA', 'ICMS BA - Contribuinte Industrializa√ß√£o'),
        ('BA', 'NAO_CONTRIBUINTE', 'CONSUMO_PROPRIO', 'ICMS BA - N√£o Contribuinte Uso/Consumo'),
        
        # Testando RS que n√£o tem Uso/Consumo
        ('RS', 'CONTRIBUINTE', 'INDUSTRIALIZACAO', 'ICMS RS - Contribuinte Industrializa√ß√£o'),
        ('RS', 'CONTRIBUINTE', 'USO_CONSUMO', 'ICMS RS - Contribuinte Uso/Consumo'),
        
        # Exporta√ß√£o
        ('MG', 'CONTRIBUINTE', 'EXPORTACAO', 'Isento'),
        ('MG', 'NAO_CONTRIBUINTE', 'EXPORTACAO', 'Isento'),
    ]
    
    print("üìã CEN√ÅRIOS DE TESTE:")
    print()
    
    for uf, contribuinte, venda_destinada, imposto_esperado in cenarios:
        print(f"üîç {uf} + {contribuinte} + {venda_destinada}")
        
        # Simular l√≥gica JavaScript
        if venda_destinada == 'EXPORTACAO':
            aliquota = 0
            tipo_usado = 'Isento'
            imposto_real = 'Isento'
        elif venda_destinada in ['INDUSTRIALIZACAO', 'REVENDA']:
            if contribuinte == 'CONTRIBUINTE':
                try:
                    imposto_obj = Imposto.objects.get(nome=f'ICMS {uf} - Contribuinte Industrializa√ß√£o')
                    aliquota = float(imposto_obj.aliquota)
                    tipo_usado = 'Contribuinte Industrializa√ß√£o'
                    imposto_real = imposto_obj.nome
                except Imposto.DoesNotExist:
                    aliquota = 7.00
                    tipo_usado = 'Contribuinte Industrializa√ß√£o (Padr√£o)'
                    imposto_real = 'N√£o encontrado'
            else:
                try:
                    imposto_obj = Imposto.objects.get(nome=f'ICMS {uf} - N√£o Contribuinte Industrializa√ß√£o')
                    aliquota = float(imposto_obj.aliquota)
                    tipo_usado = 'N√£o Contribuinte Industrializa√ß√£o'
                    imposto_real = imposto_obj.nome
                except Imposto.DoesNotExist:
                    aliquota = 18.00
                    tipo_usado = 'N√£o Contribuinte Industrializa√ß√£o (Padr√£o)'
                    imposto_real = 'N√£o encontrado'
        elif venda_destinada in ['USO_CONSUMO', 'CONSUMO_PROPRIO']:
            if contribuinte == 'CONTRIBUINTE':
                try:
                    imposto_obj = Imposto.objects.get(nome=f'ICMS {uf} - Contribuinte Uso/Consumo')
                    aliquota = float(imposto_obj.aliquota)
                    tipo_usado = 'Contribuinte Uso/Consumo'
                    imposto_real = imposto_obj.nome
                except Imposto.DoesNotExist:
                    aliquota = 7.20
                    tipo_usado = 'Contribuinte Uso/Consumo (Padr√£o)'
                    imposto_real = 'N√£o encontrado'
            else:
                try:
                    imposto_obj = Imposto.objects.get(nome=f'ICMS {uf} - N√£o Contribuinte Uso/Consumo')
                    aliquota = float(imposto_obj.aliquota)
                    tipo_usado = 'N√£o Contribuinte Uso/Consumo'
                    imposto_real = imposto_obj.nome
                except Imposto.DoesNotExist:
                    aliquota = 18.00
                    tipo_usado = 'N√£o Contribuinte Uso/Consumo (Padr√£o)'
                    imposto_real = 'N√£o encontrado'
        
        # Verificar se est√° correto
        if imposto_real == imposto_esperado or (imposto_esperado == 'Isento' and aliquota == 0):
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        print(f"   {status} Al√≠quota: {aliquota}%")
        print(f"   {status} Tipo: {tipo_usado}")
        print(f"   {status} Esperado: {imposto_esperado}")
        print(f"   {status} Encontrado: {imposto_real}")
        print()
    
    # Resumo das novas op√ß√µes dispon√≠veis
    print("üìä RESUMO DAS OP√á√ïES DISPON√çVEIS:")
    print()
    print("   üè≠ INDUSTRIALIZA√á√ÉO:")
    print("      ‚Ä¢ Contribuinte ‚Üí Al√≠quota reduzida (7% ou 12%)")
    print("      ‚Ä¢ N√£o Contribuinte ‚Üí Al√≠quota cheia (17% a 22%)")
    print()
    print("   üîß USO/CONSUMO:")
    print("      ‚Ä¢ Contribuinte ‚Üí Al√≠quota de uso (7.2% ou 12.4%)")
    print("      ‚Ä¢ N√£o Contribuinte ‚Üí Al√≠quota de uso (7.2% ou 12.4%)")
    print()
    print("   üì¶ EXPORTA√á√ÉO:")
    print("      ‚Ä¢ Sempre isento (0%)")
    print()
    print("   üîÑ COMPATIBILIDADE:")
    print("      ‚Ä¢ REVENDA ‚Üí mapeado para INDUSTRIALIZA√á√ÉO")
    print("      ‚Ä¢ CONSUMO_PROPRIO ‚Üí mapeado para USO_CONSUMO")

if __name__ == "__main__":
    testar_nova_logica()