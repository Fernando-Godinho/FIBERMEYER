#!/usr/bin/env python
"""
Script para testar as op√ß√µes simplificadas de venda destinada
"""

import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fibermeyer_project.settings')
django.setup()

from main.models import Orcamento, VENDA_DESTINADA_CHOICES
from main.models import Imposto

def testar_opcoes_simplificadas():
    """Testa as novas op√ß√µes simplificadas"""
    
    print("üéØ TESTANDO OP√á√ïES SIMPLIFICADAS DE VENDA DESTINADA")
    print("=" * 60)
    
    # Mostrar as op√ß√µes dispon√≠veis
    print("üìã OP√á√ïES DISPON√çVEIS NO MODELO:")
    for value, label in VENDA_DESTINADA_CHOICES:
        print(f"   ‚Ä¢ {value} ‚Üí {label}")
    print()
    
    # Testar cen√°rios com as novas op√ß√µes
    cenarios = [
        # (UF, CONTRIBUINTE, VENDA_DESTINADA, RESULTADO_ESPERADO)
        ('SP', 'CONTRIBUINTE', 'INDUSTRIALIZACAO', 'ICMS SP - Contribuinte Industrializa√ß√£o'),
        ('SP', 'NAO_CONTRIBUINTE', 'INDUSTRIALIZACAO', 'ICMS SP - N√£o Contribuinte Industrializa√ß√£o'),
        ('SP', 'CONTRIBUINTE', 'USO_CONSUMO', 'ICMS SP - Contribuinte Uso/Consumo'),
        ('SP', 'NAO_CONTRIBUINTE', 'USO_CONSUMO', 'ICMS SP - N√£o Contribuinte Uso/Consumo'),
        
        ('BA', 'CONTRIBUINTE', 'INDUSTRIALIZACAO', 'ICMS BA - Contribuinte Industrializa√ß√£o'),
        ('BA', 'NAO_CONTRIBUINTE', 'USO_CONSUMO', 'ICMS BA - N√£o Contribuinte Uso/Consumo'),
        
        # Testando RS que n√£o tem Uso/Consumo
        ('RS', 'CONTRIBUINTE', 'INDUSTRIALIZACAO', 'ICMS RS - Contribuinte Industrializa√ß√£o'),
        ('RS', 'CONTRIBUINTE', 'USO_CONSUMO', 'Padr√£o (RS n√£o tem Uso/Consumo)'),
    ]
    
    print("üß™ CEN√ÅRIOS DE TESTE:")
    print()
    
    for uf, contribuinte, venda_destinada, esperado in cenarios:
        print(f"üîç {uf} + {contribuinte} + {venda_destinada}")
        
        # Simular l√≥gica JavaScript simplificada
        if venda_destinada == 'INDUSTRIALIZACAO':
            if contribuinte == 'CONTRIBUINTE':
                nome_imposto = f'ICMS {uf} - Contribuinte Industrializa√ß√£o'
            else:
                nome_imposto = f'ICMS {uf} - N√£o Contribuinte Industrializa√ß√£o'
        elif venda_destinada == 'USO_CONSUMO':
            if contribuinte == 'CONTRIBUINTE':
                nome_imposto = f'ICMS {uf} - Contribuinte Uso/Consumo'
            else:
                nome_imposto = f'ICMS {uf} - N√£o Contribuinte Uso/Consumo'
        
        # Tentar encontrar o imposto na base
        try:
            imposto_obj = Imposto.objects.get(nome=nome_imposto)
            resultado = f"{imposto_obj.nome} ({imposto_obj.aliquota}%)"
            status = "‚úÖ" if nome_imposto in esperado else "‚ö†Ô∏è"
        except Imposto.DoesNotExist:
            resultado = f"N√£o encontrado - usando padr√£o"
            status = "‚ö†Ô∏è" if "Padr√£o" not in esperado else "‚úÖ"
        
        print(f"   {status} Resultado: {resultado}")
        print(f"   {status} Esperado: {esperado}")
        print()
    
    # Verificar o valor padr√£o
    print("üîß TESTE DO VALOR PADR√ÉO:")
    print(f"   ‚Ä¢ Valor padr√£o do modelo: INDUSTRIALIZACAO")
    print(f"   ‚Ä¢ Isso significa que novos or√ßamentos usar√£o Industrializa√ß√£o por padr√£o")
    print()
    
    # Resumo das mudan√ßas
    print("üìä RESUMO DAS MUDAN√áAS:")
    print()
    print("   ‚ùå REMOVIDAS:")
    print("      ‚Ä¢ EXPORTA√á√ÉO ‚Üí Era isenta (0%)")
    print("      ‚Ä¢ CONSUMO_PROPRIO ‚Üí Era mapeado para Uso/Consumo")
    print("      ‚Ä¢ REVENDA ‚Üí Era mapeado para Industrializa√ß√£o")
    print()
    print("   ‚úÖ MANTIDAS:")
    print("      ‚Ä¢ INDUSTRIALIZACAO ‚Üí Corresponde aos impostos de Industrializa√ß√£o")
    print("      ‚Ä¢ USO_CONSUMO ‚Üí Corresponde aos impostos de Uso/Consumo")
    print()
    print("   üéØ BENEF√çCIOS:")
    print("      ‚Ä¢ Interface mais limpa e objetiva")
    print("      ‚Ä¢ Mapeamento direto com os tipos de impostos")
    print("      ‚Ä¢ Menos confus√£o para o usu√°rio")
    print("      ‚Ä¢ Conformidade total com a base de impostos")

if __name__ == "__main__":
    testar_opcoes_simplificadas()